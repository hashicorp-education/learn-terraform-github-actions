name: 'Terraform'

on:
    push:
        branches:
            - main
    pull_request:

jobs:
    terraform:
        name: 'Terraform'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Get Commit
              id: commit
              uses: pr-mpt/actions-commit-hash@v1

            - name: Config AWS Creds
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to AWS ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push to ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ secrets.APP_NAME }}
                  IMAGE_TAG: ${{ steps.commit.outputs.short }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              env:
                  TF_VAR_app: ${{ secrets.APP_NAME}}
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: Terraform Format
              id: fmt
              run: terraform fmt -check

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan
              id: plan
              if: github.event_name == 'pull_request'
              run: terraform plan -no-color -input=false
              continue-on-error: true

            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                  PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`\n
                      ${process.env.PLAN}
                      \`\`\`

                      </details>

                      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                      })

            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit 1

            - name: Terraform Apply
              run: terraform apply -auto-approve -input=false
